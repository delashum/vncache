import {createResourceCache} from '..'
import {MOCK_FNS, MOCK_RESOURCES} from './mocks'

describe('actions', () => {
  it('action upsert adds', async () => {
    const $cache = createResourceCache(MOCK_RESOURCES)
    const resB1 = await $cache.b.resolve()
    expect(resB1).toHaveLength(5)
    const newB = await $cache.b.do('addB', {id: 'b6', value: 6})
    expect(newB).toEqual({id: 'b6', value: 6})
    const resB2 = await $cache.b.resolve()
    expect(resB2).toHaveLength(6)
    expect(MOCK_FNS.b.fetch).toHaveBeenCalledTimes(1)
    expect(MOCK_FNS.b.addAction).toHaveBeenCalledTimes(1)
  })
  it('action upsert patchs', async () => {
    const $cache = createResourceCache(MOCK_RESOURCES)
    const resB1 = await $cache.b.resolve()
    expect(resB1).toHaveLength(5)
    const [updatedB1] = await $cache.b.ids('b2').resolve()
    expect(updatedB1).toEqual({id: 'b2', value: 2})
    const newB = await $cache.b.do('addB', {id: 'b2', value: 200})
    expect(newB).toEqual({id: 'b2', value: 200})
    const resB2 = await $cache.b.resolve()
    expect(resB2).toHaveLength(5)
    const [updatedB2] = await $cache.b.ids('b2').resolve()
    expect(updatedB2).toEqual({id: 'b2', value: 200})
    expect(MOCK_FNS.b.fetch).toHaveBeenCalledTimes(1)
    expect(MOCK_FNS.b.addAction).toHaveBeenCalledTimes(1)
  })
  it('action updates reload embedded request resources', async () => {
    const $cache = createResourceCache(MOCK_RESOURCES)
    const res1 = await $cache.a.fetch('oneA', null).resolve()
    expect(MOCK_FNS.a.getRequest).toHaveBeenCalledTimes(1)
    expect(MOCK_FNS.a.sumRequest).toHaveBeenCalledTimes(0)
    expect(MOCK_FNS.a.fetch).toHaveBeenCalledTimes(0)
    expect(res1.myA).toBeDefined()
    expect(res1.myA.id).toEqual('a1')
    expect(res1.myA.b_id).toEqual('b1')

    await $cache.a.do('updateA1', null)
    const res2 = await $cache.a.fetch('oneA', null).resolve()
    expect(MOCK_FNS.a.getRequest).toHaveBeenCalledTimes(1)
    expect(MOCK_FNS.a.sumRequest).toHaveBeenCalledTimes(0)
    expect(MOCK_FNS.a.fetch).toHaveBeenCalledTimes(0)
    expect(res2.myA).toBeDefined()
    expect(res2.myA.id).toEqual('a1')
    expect(res2.myA.b_id).toEqual('b2')
  })
  it('action remove works', async () => {
    const $cache = createResourceCache(MOCK_RESOURCES)
    const resB1 = await $cache.b.resolve()
    expect(resB1).toHaveLength(5)
    await $cache.b.do('deleteB', 'b1')
    const resB2 = await $cache.b.resolve()
    expect(resB2).toHaveLength(4)
    expect(MOCK_FNS.b.fetch).toHaveBeenCalledTimes(1)
    expect(MOCK_FNS.b.deleteAction).toHaveBeenCalledTimes(1)
  })
  it('action reload works', async () => {
    const $cache = createResourceCache(MOCK_RESOURCES)
    const resA1 = await $cache.a.resolve()
    expect(MOCK_FNS.a.fetch).toHaveBeenCalledTimes(1)
    expect(resA1).toHaveLength(3)
    expect(resA1[0].b_id).toEqual('b5')

    await $cache.a.do('updateA1', null)
    const resA2 = await $cache.a.resolve()
    expect(MOCK_FNS.a.fetch).toHaveBeenCalledTimes(1)
    expect(resA2).toHaveLength(3)
    expect(resA2[0].b_id).toEqual('b2')

    await $cache.a.do('reloadAll', null)
    const resA3 = await $cache.a.resolve()
    expect(MOCK_FNS.a.fetch).toHaveBeenCalledTimes(2)
    expect(resA3).toHaveLength(3)
    expect(resA3[0].b_id).toEqual('b5')
  })
})
